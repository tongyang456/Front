用 Sass 变量存储数据
Sass 不同于 CSS 的一个特点是它允许使用变量。 可以在 Sass 中声明变量，并为它赋值，就像在 JavaScript 中一样。
在 JavaScript 中，变量是使用 let 和 const 关键字定义的。 在 Sass 中，变量以 $ 开头的，后跟变量名。
这里有几个例子：

$main-fonts: Arial, sans-serif;
$headings-color: green;
并使用变量：

h1 {
  font-family: $main-fonts;
  color: $headings-color;
}
当需要把多个元素设置成相同颜色时，变量就会很有用。 一旦需要更改颜色，只需要改变这个变量的值就好。
创建一个变量 $text-color 并将其设置为 red。 然后更改 .blog-post 和 h2 的 color 属性的值为 $text-color 变量。

<style type='text/scss'>
  $text-color: red;
  .header{
    text-align: center;
  }
  .blog-post, h2 {
    color: $text-color;

  }
</style>

<h1 class="header">Learn Sass</h1>
<div class="blog-post">
  <h2>Some random title</h2>
  <p>This is a paragraph with some random text in it</p>
</div>
<div class="blog-post">
  <h2>Header #2</h2>
  <p>Here is some more random text.</p>
</div>
<div class="blog-post">
  <h2>Here is another header</h2>
  <p>Even more random text within a paragraph</p>
</div>


用 Sass 嵌套 CSS
Sass 允许 CSS 规则的嵌套，这在组织样式表的时候会很有用。
在 CSS 里，每个元素的样式都需要写在独立的代码块中，如下所示：
nav {
  background-color: red;
}

nav ul {
  list-style: none;
}

nav ul li {
  display: inline-block;
}
对于一个大型项目，CSS 规则会很复杂。 这时，引入嵌套功能（即在对应的父元素中写子元素的样式）可以有效地简化代码：
nav {
  background-color: red;

  ul {
    list-style: none;

    li {
      display: inline-block;
    }
  }
}

根据上面关于嵌套的例子，来简化 .blog-post 中两个子元素的 CSS 代码。 为了通过测试，h1 应该出现在 p 元素之前。
<style type='text/scss'>
  .blog-post {
      h1 {
        text-align: center;
        color: blue;
      }
      p {
        font-size: 20px;
      }
  }
</style>

<div class="blog-post">
  <h1>Blog Title</h1>
  <p>This is a paragraph</p>
</div>


用 Mixins 创建可重用 CSS
在 Sass 中，mixin 是一组 CSS 声明，可以在整个样式表中重复使用。
CSS 的新功能需要一段时间适配后，所有浏览器后才能完全使用。 随着浏览器的不断升级，使用这些 CSS 规则时可能需要添加浏览器前缀。 考虑 box-shadow：
div {
  -webkit-box-shadow: 0px 0px 4px #fff;
  -moz-box-shadow: 0px 0px 4px #fff;
  -ms-box-shadow: 0px 0px 4px #fff;
  box-shadow: 0px 0px 4px #fff;
}
对于所有具有 box-shadow 属性的元素重写此规则，或者更改每个值以测试不同的效果，需要花费大量的精力。 Mixins 就像 CSS 的函数。 以下是一个例子：
@mixin box-shadow($x, $y, $blur, $c){ 
  -webkit-box-shadow: $x $y $blur $c;
  -moz-box-shadow: $x $y $blur $c;
  -ms-box-shadow: $x $y $blur $c;
  box-shadow: $x $y $blur $c;
}
定义以 @mixin 开头，后跟自定义名称。 参数（$x，$y，$blur，以及上例中的 $c ）是可选的。 现在在需要 box-shadow 规则的地方，只需一行 mixin 调用而无需添加所有的浏览器前缀。 mixin 可以通过 @include 指令调用。
div {
  @include box-shadow(0px, 0px, 4px, #fff);
}
为 border-radius 写一个 mixin，并给它一个 $radius 参数。 应该使用之前例子中的所有浏览器前缀。 然后使用 border-radius mixin 为 #awesome 元素提供 15px 的边框半径。
<style type='text/scss'>
  @mixin border-radius($radius){ 
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
  }

  #awesome {
    width: 150px;
    height: 150px;
    background-color: green;
    @include border-radius(15px);
  }
</style>

<div id="awesome"></div>


使用 @if 和 @else 为样式添加逻辑
Sass 中的 @if 指令对于测试特定情况非常有用——它的工作方式与 JavaScript 中的 if 语句类似。
@mixin make-bold($bool) {
  @if $bool == true {
    font-weight: bold;
  }
}
类似 JavaScript，@else if 和 @else 指令测试更多条件：

@mixin text-effect($val) {
  @if $val == danger {
    color: red;
  }
  @else if $val == alert {
    color: yellow;
  }
  @else if $val == success {
    color: green;
  }
  @else {
    color: black;
  }
}
创建一个名为 border-stroke 的 mixin，它接受一个参数 $val。 mixin 应使用 @if、@else if 和 @else 指令检查以下条件：

light - 1px solid black
medium - 3px solid black
heavy - 6px solid black
如果 $val 参数值不是 light、medium 或者 heavy，border 属性应该被设置为 none。
<style type='text/scss'>
  @mixin border-stroke($val) {
    @if $val == light {
      border: 1px solid black;
    }
    @else if $val == medium {
      border: 3px solid black;
    }
    @else if $val == heavy {
      border: 6px solid black;
    }
    @else {
      border: none;
    }
  }
  #box {
    width: 150px;
    height: 150px;
    background-color: red;
    @include border-stroke(medium);
  }
</style>
<div id="box"></div>


使用 @for 创建一个 Sass 循环
可以在 Sass 中使用 @for 循环添加样式，它的用法和 JavaScript 中的 for 循环类似。
@for 以两种方式使用：“开始 through 结束” 或 “开始 to 结束”。 主要区别在于“开始 to 结束”不包括结束数字，而“开始 through 结束”包括结束数字。
这是一个开始 through 结束的示例：
@for $i from 1 through 12 {
  .col-#{$i} { width: 100%/12 * $i; }
}
#{$i} 部分是将变量（i）与文本组合成字符串的语法。 当 Sass 文件转换为 CSS 时，它看起来像这样：
.col-1 {
  width: 8.33333%;
}

.col-2 {
  width: 16.66667%;
}

...

.col-12 {
  width: 100%;
}
这是创建网格布局的有效方法。 现在，有了 12 个可用作 CSS class 的列宽选项。
编写 @for 指令，使 $j 的值为从 1 to 6。
它应该创建 5 个名为 .text-1 to .text-5 的 class，其中每个 class 的 font-size 设置为 15px 乘以索引。
<style type='text/scss'>
@for $i from 1 through 6 {
  .text-#{$i} {
    font-size: 15px * $i;
  }
}
</style>
<p class="text-1">Hello</p>
<p class="text-2">Hello</p>
<p class="text-3">Hello</p>
<p class="text-4">Hello</p>
<p class="text-5">Hello</p>


使用 @each 遍历列表中的项目
上一个挑战显示了 @for 指令如何通过起始值和结束值循环一定次数。 Sass 还提供 @each 指令，该指令循环遍历列表或映射中的每个项目。 在每次迭代时，变量将从列表或映射分配给当前值。
@each $color in blue, red, green {
  .#{$color}-text {color: $color;}
}
map 的语法略有不同。 这是一个示例：
$colors: (color1: blue, color2: red, color3: green);
@each $key, $color in $colors {
  .#{$color}-text {color: $color;}
}
请注意，需要用 $key 变量来引用 map 中的键。 否则，编译后的 CSS 将包含 color1，color2...... 以上两个代码示例都转换为以下 CSS：

.blue-text {
  color: blue;
}

.red-text {
  color: red;
}

.green-text {
  color: green;
}
编写一个 @each 指令遍历列表：blue, black, red ，将每个变量分配给 class 为 .color-bg 的项目，使每个项目的 color 部分都是各自相应的颜色。 每个 class 也应该将 background-color 设置为相应的颜色。
<style type='text/scss'>
  @each $color in blue, black, red {
    .#{$color}-bg {
      background-color: $color
    }
  }
  div {
    height: 200px;
    width: 200px;
  }
</style>

<div class="blue-bg"></div>
<div class="black-bg"></div>
<div class="red-bg"></div>


使用 @while 循环创建样式
Sass 中的 @while 指令与 JavaScript 中的 while 类似。 只要满足条件，它就会一直创建 CSS 代码。
@for 挑战提供了一个创建简单网格系统的示例。 用 @while 也可以实现。
$x: 1;
@while $x < 13 {
  .col-#{$x} { width: 100%/12 * $x;}
  $x: $x + 1;
}
首先，定义变量 $x 并将其设置为 1。 接下来，使用 @while 指令，while $x 小于 13 时创建网格系统 。 在设置 width 的 CSS 规则后，$x 增加 1 以避免无限循环。
使用 @while 创建一系列具有不同 font-sizes 的 class。
从 text-1 到 text-5 应该有 5 个不同的 class。 然后将 font-size 设置为 15px 乘以当前索引号。 注意不要写成死循环！
<style type='text/scss'>
$x: 1;
@while $x < 6 {
  .text-#{$x} { font-size: 15px * $x;}
  $x: $x + 1;
}
</style>
<p class="text-1">Hello</p>
<p class="text-2">Hello</p>
<p class="text-3">Hello</p>
<p class="text-4">Hello</p>
<p class="text-5">Hello</p>


将一组 CSS 样式扩展到另一个元素
Sass 有一个名为 extend 的功能，可以很容易地从一个元素中借用 CSS 规则并在另一个元素上重用它们。
例如，下面的 CSS 规则块设置了 .panel class 的样式。 它有 background-color，height 和 border。
.panel{
  background-color: red;
  height: 70px;
  border: 2px solid green;
}
现在需要另一个名为 .big-panel 的面板。 它具有与 .panel 相同的基本属性，但还需要 width 和 font-size。 
可以从 .panel 复制并粘贴初始 CSS 规则，但是当添加更多类型的面板时，代码会变得重复。 extend 指令是一种重用为一个元素编写的规则的简单方法，可以为另一个元素重用并添加更多规则：
.big-panel{
  @extend .panel;
  width: 150px;
  font-size: 2em;
}
除了新样式之外，.big-panel 将具有与 .panel 相同的属性。
创建一个扩展 .info 的 class .info-important，并将background-color 设置为洋红色（magenta）。
<style type='text/scss'>
  h3{
    text-align: center;
  }
  .info{
    width: 200px;
    border: 1px solid black;
    margin: 0 auto;
  }

  .info-important{
    @extend .info;
    background-color: magenta;
  }

</style>
<h3>Posts</h3>
<div class="info-important">
  <p>This is an important post. It should extend the class ".info" and have its own CSS styles.</p>
</div>
<div class="info">
  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>
</div>
