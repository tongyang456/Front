如果传入的字符串（第一个参数）的长度大于传入的值（第二个参数），请在这个位置截断它， 并在后面加上 ...，然后返回结果。
function truncateString(str, num) { 
  if (str.length > num) {
    return str.slice(0, num) + "...";
  } else {
    return str;
  }
} 
truncateString("A-tisket a-tasket A green and yellow basket", 8);

请写一个函数来检查数组（第一个参数 arr）中的元素，并返回数组中第一个通过校验测试的元素。 
其中，“通过校验测试”指的是对于数组中的一个元素 x，若 func(x) 返回的结果为 true，则校验测试通过。 
如果没有元素通过测试，请返回 undefined。
function findElement(arr, func) {
  for (let i = 0; i < arr.length; i++) {
    if (func(arr[i])) {
      return arr[i];
    }
  }
  return undefined;
}
findElement([1, 2, 3, 4], num => num % 2 === 0);

检查一个值是否是基本类型中的布尔值（boolean）类型。 函数应返回 true 或者 false。基本类型中的布尔值为 true 或者 false。

function booWho(bool) {
  return typeof bool === "boolean";
}
booWho(null);

请将传入的字符串中，每个单词的第一个字母变成大写并返回。 注意除首字母外，其余的字符都应是小写的。

在这个挑战中，我们还需要将诸如 the 和 of 之类的连接词大写。
function titleCase(str) {
  let words = str.toLowerCase().split(' ');
  let titleCasedWords = words.map(function(word) {
    return word.charAt(0).toUpperCase() + word.slice(1);
  });
  return titleCasedWords.join(' ');
}
titleCase("I'm a little tea pot");

本挑战的输入参数为两个数组和一个索引值。
将第一个数组中的所有元素依次复制到第二个数组中。
请注意，你需要从第二个数组索引值为 n 的地方开始插入。
最后，请返回插入元素后的数组。 作为输入参数的两个数组在函数执行前后应保持不变。

function frankenSplice(arr1, arr2, n) {
  let result = [...arr2]; // 复制数组 arr2
  result.splice(n, 0, ...arr1); // 在索引值 n 的位置插入数组 arr1 的所有元素
  return result;
}
frankenSplice([1, 2, 3], [4, 5, 6], 1);

从数组中移除所有假值（falsy values）。 返回一个新数组；不要改变原始数组。
JavaScript 中的假值有 false、null、0、""、undefined、NaN。
提示：可以考虑将每个值都转换为布尔值（boolean）。
function bouncer(arr) {
  return arr.filter(Boolean);
}

bouncer([7, "ate", "", false, 9]);

数组（第一个参数）在排序后，将一个值（第二个参数）插入该数组，并使数组保持有序。返回这个新插入元素的最小索引值。 返回值应为一个数字。
例如，getIndexToIns([1,2,3,4], 1.5) 应该返回 1 因为1.5 大于 1（索引为 0）且小于 2（索引为 1）。
同样地，getIndexToIns([20,3,5], 19) 应该返回 2。 因为数组排序后会变成 [3,5,20]，而 19 小于 20（索引为 2）且大于 5（索引为 1）。

function getIndexToIns(arr, num) {
  arr.sort(function(a, b) {
    return a - b;
  });

  for (let i = 0; i < arr.length; i++) {
    if (arr[i] >= num) {
      return i;
    }
  }
  return arr.length;
}
getIndexToIns([40, 60], 50);

如果数组里的第一个字符串包含了第二个字符串中的所有字母，则返回 true。
例如，["hello", "Hello"] 应该返回 true。因为在忽略大小写的情况下，第一个字符串包含了第二个字符串里出现的所有字母。
["hello", "hey"] 应该返回 false。因为 hello 并不包含字符 y。
最后，["Alien", "line"] 应该返回 true。因为 line 中的所有字母都出现在了 Alien 中。

function mutation(arr) {
    var sourceStr = arr[0].toLowerCase();
    var targetArr = arr[1].toLowerCase().split("");

    var filteredArr = targetArr.filter(function (char) {
        return sourceStr.indexOf(char) === -1;
    })
    return filteredArr.length === 0;
}

mutation(["hello", "hey"]);

请编写一个函数，该函数将一个数组（第一个参数）拆分成若干长度为 size（第二个参数）的子数组，并将它们作为二维数组返回。
function chunkArrayInGroups(arr, size) {
  let result = [];
  for (let i = 0; i < arr.length; i += size) {
    result.push(arr.slice(i, i + size));
  }
  return result;
}

chunkArrayInGroups(["a", "b", "c", "d"], 2);
