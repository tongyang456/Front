使用 push() 和 unshift() 为数组添加元素,push 数组尾插入，unshift 数组头插入
我们已经定义了一个 mixedNumbers 函数，它接收一个数组作为参数。 
请修改这个函数，使用 push() 和 unshift() 来将 'I', 2, 'three' 插入到数组开头；
将 7, 'VIII', 9 插入到数组的末尾。最终这个函数的返回值就会是一个依次包含不同形式的 1-9 的数组。
function mixedNumbers(arr) {
  // 只修改这一行下面的代码
  arr.push(7, 'VIII', 9);
  arr.unshift('I', 2, 'three');

  // 只修改这一行上面的代码
  return arr;
}

console.log(mixedNumbers(['IV', 5, 'six']));


使用 pop() 和 shift() 从数组中删除元素，shift数组头移除元素，pop数组尾移除元素；
我们已经定义了一个 popShift 函数，它接收一个数组作为输入参数并返回一个新的数组。 
请修改这个函数，使用 pop() 和 shift() 来移除输入的数组中的第一个元素和最后一个元素，并将这两个被移除的元素分别赋值给对应的变量，使得最终返回的数组里包含这两个值。
function popShift(arr) {
  let popped = arr.pop(); // 修改这一行
  let shifted = arr.shift(); // 修改这一行
  return [shifted, popped];
}

console.log(popShift(['challenge', 'is', 'not', 'complete']));


使用 splice() 删除元素
但如果我们想删除数组中间的一个元素， 或者想一次删除多个元素，该如何操作呢？ 这时候我们就需要使用 splice() 方法了， splice() 可以让我们从数组中的任意位置连续删除任意数量的元素。
我们已经定义了数组 arr。 请使用 splice() 从 arr 里移除元素，使剩余的元素之和为 10。
const arr = [2, 4, 5, 1, 7, 5, 2, 1];
// 只修改这一行下面的代码
arr.splice(1,4);
// 只修改这一行上面的代码
console.log(arr);


使用 splice() 添加元素
我们已经定义了一个 htmlColorNames 函数，它以一个 HTML 颜色的数组作为输入参数。 
请修改这个函数，使用 splice() 来移除数组中的前两个元素，并在对应的位置上添加 'DarkSalmon' 和 'BlanchedAlmond'。
function htmlColorNames(arr) {
  // 只修改这一行下面的代码
  arr.splice(0,2,'DarkSalmon','BlanchedAlmond');
  // 只修改这一行上面的代码
  return arr;
}

console.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurquoise', 'FireBrick']));


使用 slice() 复制数组元素
接下来我们要介绍 slice() 方法。 slice() 不会修改数组，而是会复制，或者说*提取（extract）*给定数量的元素到一个新数组。 
slice() 只接收 2 个输入参数：第一个是开始提取元素的位置（索引），第二个是提取元素的结束位置（索引）。 提取的元素中不包括第二个参数所对应的元素。 （左闭右开）
我们已经定义了一个 forecast 函数，它接受一个数组作为参数。 请修改这个函数，利用 slice() 从输入的数组中提取信息，最终返回一个包含元素 warm 和 sunny 的新数组。
function forecast(arr) {
  // 只修改这一行下面的代码
  let arrNew = [];
  arrNew = arr.slice(2,4);
  return arrNew;
}

// 只修改这一行上面的代码
console.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));


使用展开运算符复制数组
slice() 可以让我们从一个数组中选择一些元素来复制到新数组中，而 ES6 中又引入了一个简洁且可读性强的语法：
展开运算符（spread operator），它能让我们方便地复制数组中的所有元素。 展开语法写出来是这样：...
我们已经定义了一个 copyMachine 函数，它接受 arr（一个数组）和 num（一个数字）作为输入参数。 
该函数需要返回一个由 num 个 arr 组成的新的二维数组。 同时，我们写好了大致的流程，只是细节实现还没有写完。 
请修改这个函数，使用展开语法，使该函数能正常工作（提示：我们已经学到过的一个方法很适合用在这里）！
function copyMachine(arr, num) {
  let newArr = [];
  while (num >= 1) {
    // 只修改这一行下面的代码
    let arr1=[...arr];
    newArr.push(arr1);
    // 只修改这一行上面的代码
    num--;
  }
  return newArr;
}

console.log(copyMachine([true, false, true], 2));


使用展开运算符合并数组
我们已经定义了一个返回 sentence 变量的 spreadOut 函数。 请修改这个函数，利用 spread 使该函数返回数组 ['learning', 'to', 'code', 'is', 'fun']。
function spreadOut() {
  let fragment = ['to', 'code'];
  let sentence = ['learning', ...fragment, 'is', 'fun']; // 修改这一行
  return sentence;
}

console.log(spreadOut());


使用 indexOf() 检查元素是否存在
indexOf() 在快速检查一个数组中是否存在某个元素时非常有用。 
我们已经定义了一个 quickCheck 函数，它接受一个数组和一个元素作为输入参数。 
请通过 indexOf() 方法修改这个函数，使得当传入的参数在数组中存在时返回 true，否则返回 false。
function quickCheck(arr, elem) {
  // 只修改这一行下面的代码
  if(arr.indexOf(elem) == -1){
    return false;
  }else{
    return true;
  }
  // 只修改这一行上面的代码
}

console.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));


使用 for 循环遍历数组中的全部元素
我们已经定义了 filteredArray 函数，它接受一个嵌套的数组 arr 和一个 elem 作为参数，并要返回一个新数组。 
arr 数组中嵌套的数组里可能包含 elem 元素，也可能不包含。 请修改该函数，用一个 for 循环来做筛选，使函数返回一个由 arr 中不包含 elem 的数组所组成的新数组。
function filteredArray(arr, elem) {
  let newArr = [];
  // 只修改这一行下面的代码
  for (let i = 0; i < arr.length; i++) {
    if (arr[i].indexOf(elem) === -1) { // 如果 arr[i] 数组不包含 elem 元素
      newArr.push(arr[i]); // 将 arr[i] 添加到 newArr 数组中
    }
  }
  // 只修改这一行上面的代码
  return newArr;
}

console.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));


创建复杂的多维数组
我们已经定义了一个叫做 myNestedArray 的数组变量。 
请修改 myNestedArray，使用字符串（string）、数字（number）或布尔值（boolean）的任意组合作为数组的元素，并让 myNestedArray 刚好有 5 层（注意，最外层的数组是第 1 层）。 
同时，请在第 3 层的数组中包含字符串 deep；在第 4 层的数组中包含字符串 deeper，在第 5 层的数组中包含字符串 deepest。

let myNestedArray = [
  // 只修改这一行下面的代码
    ['unshift', false, 1, 2, 3, 'complex', 
  'nested',['deep',['deeper',['deepest']]]],
  // 只修改这一行上面的代码
];


将键值对添加到对象中
我们已经为你创建了包含三个项目的 foods 对象。 
请使用上述任意语法，来为 foods 对象添加如下三个键值对：bananas 属性，值为 13；grapes 属性，值为 35；strawberries 属性，值为 27。
let foods = {
  apples: 25,
  oranges: 32,
  plums: 28
};

// 只修改这一行下面的代码
foods.bananas = 13;
foods.grapes = 35;
foods.strawberries = 27;
// 只修改这一行上面的代码

console.log(foods);


修改嵌套在对象中的对象
我们已经定义了一个 userActivity 对象，它包含了另一个对象。 请将 online 的属性值改为 45。
let userActivity = {
  id: 23894201352,
  date: 'January 1, 2017',
  data: {
    totalUsers: 51,
    online: 42
  }
};

// 只修改这一行下面的代码
userActivity.data.online=45;
// 只修改这一行上面的代码

console.log(userActivity);


使用方括号访问属性名称
我们已经定义了 checkInventory 函数，它接受一个被扫描到的商品名作为输入参数。 
请让这个函数返回 foods 对象中，以 scannedItem 的值所命名的属性对应的属性值。 
在本挑战中，只有合理有效的属性名会作为参数传入 checkInventory，因此你不需要处理参数无效的情况。
let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};

function checkInventory(scannedItem) {
  // 只修改这一行下面的代码
  return foods[scannedItem];
  // 只修改这一行上面的代码
}

console.log(checkInventory("apples"));


使用 delete 关键字删除对象属性
请使用 delete 关键字来移除 foods 中的 oranges、plums 和 strawberries 属性。
let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};

// 只修改这一行下面的代码
delete foods.oranges;
delete foods.plums;
delete foods.strawberries;
// 只修改这一行上面的代码

console.log(foods);


检查对象是否具有某个属性
请完善这个函数，如果传递给它的对象包含四个名字 Alan、Jeff、Sarah 和 Ryan，函数返回 true，否则返回 false。
let users = {
  Alan: {
    age: 27,
    online: true
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: true
  },
  Ryan: {
    age: 19,
    online: true
  }
};

function isEveryoneHere(userObj) {
  // 只修改这一行下面的代码
  if('Alan' in userObj&&'Jeff' in userObj&&'Sarah' in userObj&&'Ryan' in userObj)
  {
    return true;
  }
  else 
    return false;
  // 只修改这一行上面的代码
}

console.log(isEveryoneHere(users));


使用 for...in 语句遍历对象
我们定义了一个函数 countOnline，它接收一个参数 allUsers。 
在这个函数中使用 for...in 语句来遍历 allUsers 对象，并返回 online 属性为 true 的用户数量。 
一个可以传递给 countOnline 的对象的例子显示如下。 每个用户都有 online 属性，其属性值为 true 或 false。
{
  Alan: {
    online: false
  },
  Jeff: {
    online: true
  },
  Sarah: {
    online: false
  }
}

const users = {
  Alan: {
    online: false
  },
  Jeff: {
    online: true
  },
  Sarah: {
    online: false
  }
}

function countOnline(allUsers) {
  // 只修改这一行下面的代码
  let count = 0;
  for (let user in allUsers) {
    if (allUsers[user].online) {
      count++;
    }
  }  
  return count;
  // 只修改这一行上面的代码
}
console.log(countOnline(users));


使用 Object.keys() 生成由对象的所有属性组成的数组
我们可以给 Object.keys() 方法传入一个对象作为参数，来生成包含对象所有键的数组。 
这个方法将对象作为参数并返回代表对象中每个属性的字符串数组。 需要注意的是，数组中元素的顺序是不确定的。
请完成 getArrayOfUsers 函数的实现，使其返回一个由输入对象中的所有属性所组成的数组。
let users = {
  Alan: {
    age: 27,
    online: false
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: false
  },
  Ryan: {
    age: 19,
    online: true
  }
};

function getArrayOfUsers(obj) {
  // 只修改这一行下面的代码
  return Object.keys(obj); 
  // 只修改这一行上面的代码
}

console.log(getArrayOfUsers(users));


修改存储在对象中的数组
请看一下代码编辑器中我们为你写好的对象。 
user 对象包含 3 个属性； data 对象包含 5 个属性，其中包含一个叫做 friends 的数组。 这就是对象作为数据结构所展现出的灵活性。 
我们已经写好了 addFriend 函数的一部分， 请你完成这个函数，使其接受一个 user 对象，将 friend 参数中的名字添加到 user.data.friends 数组中并返回该数组。
let user = {
  name: 'Kenneth',
  age: 28,
  data: {
    username: 'kennethCodesAllDay',
    joinDate: 'March 26, 2016',
    organization: 'freeCodeCamp',
    friends: [
      'Sam',
      'Kira',
      'Tomo'
    ],
    location: {
      city: 'San Francisco',
      state: 'CA',
      country: 'USA'
    }
  }
};

function addFriend(userObj, friend) {
  // 只修改这一行下面的代码
  // 将friend添加到userObj.data.friends数组中
  userObj.data.friends.push(friend);
  // 返回更新后的数组
  return userObj.data.friends;
  // 只修改这一行上面的代码
}

console.log(addFriend(user, 'Pete'));

