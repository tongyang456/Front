同时用多种模式匹配文字字符串
完成正则表达式 petRegex 以匹配 dog、cat、bird 或者 fish。
let petString = "James has a pet cat.";
let petRegex = /dog|cat|bird|fish/; // 修改这一行
let result = petRegex.test(petString);


匹配时忽略大小写
编写正则表达式 fccRegex 以匹配 freeCodeCamp，忽略大小写。 正则表达式不应与任何缩写或带有空格的变体匹配。
let myString = "freeCodeCamp";
let fccRegex = /freeCodeCamp/i; // 修改这一行
let result = fccRegex.test(myString);


提取匹配项
利用 .match() 方法提取单词 coding。
let extractStr = "Extract the word 'coding' from this string.";
let codingRegex = /coding/; // 修改这一行
let result = extractStr.match(codingRegex); // 修改这一行


全局匹配
使用正则表达式 starRegex，从字符串 twinkleStar 中匹配所有的 Twinkle 单词并提取出来。
let twinkleStar = "Twinkle, twinkle, little star";
let starRegex = /Twinkle/gi; // 修改这一行
let result = twinkleStar.match(starRegex); // 修改这一行


用通配符匹配任何内容
完成正则表达式 unRegex 以匹配字符串 run、sun、fun、pun、nun 和 bun。 正则表达式中应该使用通配符。
let exampleStr = "Let's have fun with regular expressions!";
let unRegex = /.un/gi; // 修改这一行
let result = unRegex.test(exampleStr);


将单个字符与多种可能性匹配
使用元音字符集（a、e、i、o、u）在正则表达式 vowelRegex 中匹配到字符串 quoteSample 中的所有元音。
let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";
let vowelRegex = /[aeiou]/gi; // 修改这一行
let result = quoteSample.match(vowelRegex); // 修改这一行


匹配字母表中的字母
匹配字符串 quoteSample 中的所有字母。
注意：一定要同时匹配大小写字母。
let quoteSample = "The quick brown fox jumps over the lazy dog.";
let alphabetRegex = /[a-zA-Z]/gi;
let result = quoteSample.match(alphabetRegex);


匹配字母表中的数字和字母
创建一个正则表达式，使其可以匹配 h 和 s 之间的一系列字母，以及 2 和 6 之间的一系列数字。 请记得在正则表达式中包含恰当的标志。
let quoteSample = "Blueberry 3.141592653s are delicious.";
let myRegex = /[h-s2-6]/gi;
let result = quoteSample.match(myRegex);


匹配单个未指定的字符
创建一个匹配所有非数字或元音字符的正则表达式。 请记得在正则表达式中包含恰当的标志。
let quoteSample = "3 blind mice.";
let myRegex = /[^aeiou^0-9]/gi;
let result = quoteSample.match(myRegex);


匹配出现一次或多次的字符
想要在字符串 Mississippi 中匹配到出现一次或多次的字母 s 的匹配项。 编写一个使用 + 符号的正则表达式。
let difficultSpelling = "Mississippi";
let myRegex = /s+/gi; // 修改这一行
let result = difficultSpelling.match(myRegex);


匹配出现零次或多次的字符
在这个挑战里，chewieQuote 已经被初始化为 Aaaaaaaaaaaaaaaarrrgh!。 
创建一个变量为 chewieRegex 的正则表达式，使用 * 在 chewieQuote 中匹配 A 及其之后出现的零个或多个a。 你的正则表达式不需要使用修饰符，也不需要匹配引号。
// 只修改这一行下面的代码
let chewieRegex = /Aa*/; // 修改这一行
// 只修改这一行上面的代码
let result = chewieQuote.match(chewieRegex);


用惰性匹配来查找字符
修复正则表达式 /<.*>/，让它返回 HTML 标签 <h1>，而不是文本 "<h1>Winter is coming</h1>"。 请记得在正则表达式中使用通配符 . 来匹配任意字符。
let text = "<h1>Winter is coming</h1>";
let myRegex = /<.*?>/;
let result = text.match(myRegex);


编写一个贪婪正则表达式，在一组其他人中匹配到一个或多个罪犯。 罪犯由大写字母C表示。
let reCriminals = /C+/;


匹配字符串的开头
在正则表达式中使用脱字符来找到 Cal 在字符串 rickyAndCal 中的开始位置。
let rickyAndCal = "Cal and Ricky both like racing.";
let calRegex = /^Cal/; // 修改这一行
let result = calRegex.test(rickyAndCal);


匹配字符串的末尾
使用锚点字符 $ 来匹配字符串 caboose 在字符串末尾 caboose。
let caboose = "The last car on a train is the caboose";
let lastRegex = /caboose$/; // 修改这一行
let result = lastRegex.test(caboose);


匹配所有的字母和数字
使用元字符 \w 来计算所有引号中字母和数字字符的数量。
let quoteSample = "The five boxing wizards jump quickly.";
let alphabetRegexV2 = /[\w]/g;
let result = quoteSample.match(alphabetRegexV2).length;


匹配除了字母和数字的所有符号
使用缩写 \W 来计算引号中所有非字符字母和数字字符的数量。
let quoteSample = "The five boxing wizards jump quickly.";
let nonAlphabetRegex = /[\W]/g; // 修改这一行
let result = quoteSample.match(nonAlphabetRegex).length;

匹配所有数字
使用缩写 \d 来计算电影标题中有多少个数字。 书面数字（"six" 而不是 6）不计算在内。
let movieName = "2001: A Space Odyssey";
let numRegex = /[\d]/g; // 修改这一行
let result = movieName.match(numRegex).length;


匹配所有非数字
使用非数字缩写 \D 来计算电影标题中有多少非数字。
let movieName = "2001: A Space Odyssey";
let noNumRegex = /[\D]/g; // 修改这一行
let result = movieName.match(noNumRegex).length;


限制可能的用户名
用户名在互联网上随处可见。 它们是用户在自己喜欢的网站上的唯一身份。
需要检索数据库中的所有用户名。 以下是用户在创建用户名时必须遵守的一些简单规则。
用户名只能是数字字母字符。
用户名中的数字必须在最后。 数字可以有零个或多个。 用户名不能以数字开头。
用户名字母可以是小写字母和大写字母。
用户名长度必须至少为两个字符。 两位用户名只能使用字母。
修改正则表达式 userCheck 以满足上面列出的约束。
let username = "JackOfAllTrades";
let userCheck = /^[a-z][a-z]+\d*$|^[a-z]\d\d+$/i;
let result = userCheck.test(username);


匹配空白字符
修改正则表达式 countWhiteSpace 查找字符串中的多个空白字符。
let sample = "Whitespace is important in separating words";
let countWhiteSpace = /\s/g; // 修改这一行
let result = sample.match(countWhiteSpace);


匹配非空白字符
修改正则表达式 countNonWhiteSpace 以查找字符串中的多个非空字符。
let sample = "Whitespace is important in separating words";
let countNonWhiteSpace = /\S/g; // 修改这一行
let result = sample.match(countNonWhiteSpace);


指定匹配的上限和下限
修改正则表达式 ohRegex 以匹配出现 3 到 6 次字母 h 的字符串 Oh no。
let ohStr = "Ohhh no";
let ohRegex = /Oh{3,6}\sno/;
let result = ohRegex.test(ohStr);


只指定匹配的下限
修改正则表达式 haRegex，匹配包含四个或更多字母 z 的单词 Hazzah。
let haStr = "Hazzzzah";
let haRegex = /Haz{4,}ah/; // 修改这一行
let result = haRegex.test(haStr);


指定匹配的确切数量
修改正则表达式timRegex，以匹配仅有四个字母 m 的单词 Timber。
let timStr = "Timmmmber";
let timRegex = /Tim{4}ber/; // 修改这一行
let result = timRegex.test(timStr);


检查全部或无
修改正则表达式 favRegex 以匹配美式英语（favorite）和英式英语（favourite）的单词版本。
let favWord = "favorite";
let favRegex = /favou?rite/;
let result = favRegex.test(favWord);


正向先行断言和负向先行断言
先行断言 （Lookaheads）是告诉 JavaScript 在字符串中向前查找的匹配模式。 当想要在同一个字符串上搜寻多个匹配模式时，这可能非常有用。
有两种先行断言：正向先行断言（positive lookahead）和负向先行断言（negative lookahead）。
正向先行断言会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。 正向先行断言的用法是 (?=...)，其中 ... 就是需要存在但不会被匹配的部分。
另一方面，负向先行断言会查看并确保搜索匹配模式中的元素不存在。 负向先行断言的用法是 (?!...)，其中 ... 是希望不存在的匹配模式。 
如果负向先行断言部分不存在，将返回匹配模式的其余部分。
let sampleWord = "astronaut";
/P(engu|umpk)in/g
let result = pwRegex.test(sampleWord);


检查混合字符组
完善正则表达式，使其以区分大小写的方式检查 Franklin Roosevelt 或 Eleanor Roosevelt 的名字，并且应该忽略 middle names。
然后完善代码，使创建的正则检查 myString，根据正则是否匹配返回 true 或 false。
let myString = "Eleanor Roosevelt";
let myRegex = /(Eleanor|Franklin).*? Roosevelt/; // 修改这一行
let result = myRegex.test(myString); // 修改这一行
// 使用 myString 通过挑战后，了解分组如何运行


使用捕获组重用模式
在 reRegex 中使用捕获组来匹配一个只由相同的数字重复三次组成的由空格分隔字符串。
使其满足如下所有条件：
你的正则表达式应该使用数字的简写字符类。
你的正则表达式应该使用捕获组两次。
你的正则表达式应该匹配字符串"42 42 42"。
你的正则表达式应该匹配字符串"100 100 100"。
你的正则表达式不应匹配字符串"42 42 42 42"。
你的正则表达式不应该匹配字符串"42 42"。
你的正则表达式不应该匹配字符串"101 102 103"。
你的正则表达式不应匹配字符串"1 2 3"。
你的正则表达式应该匹配字符串"10 10 10"。
你的正则表达式不应匹配字符串 "42/\t42/\t42"。
你的正则表达式不应匹配字符串 "42  42  42"。

let repeatNum = "42 42 42";
let reRegex = /^(\d+) \1 \1$/;
let result = reRegex.test(repeatNum);


使用捕获组搜索和替换
使用三个捕获组编写一个正则表达式 fixRegex，这三个捕获组将搜索字符串 one two three 中的每个单词。
然后更新 replaceText 变量，以字符串 three two one 替换 one two three，并将结果分配给 result 变量。 
确保使用美元符号（$）语法在替换字符串中使用捕获组。
let str = "one two three";
let fixRegex = /(\w+)\s+(\w+)\s+(\w+)/;
let replaceText = "$3 $2 $1";
let result = str.replace(fixRegex, replaceText);


删除开头和结尾的空白
编写一个正则表达式并使用适当的字符串方法删除字符串开头和结尾的空格。
注意： String.prototype.trim() 方法在这里也可以实现同样的效果，但是你需要使用正则表达式来完成此项挑战。
let hello = "   Hello, World!  ";
let wsRegex = /^\s+|\s+$/g;
let result = hello.replace(wsRegex, "");

