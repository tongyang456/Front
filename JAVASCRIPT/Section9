范围内的数字求和
我们会传入一个由两个数字组成的数组。 给出一个含有两个数字的数组，我们需要写一个函数，让它返回这两个数字间所有数字（包含这两个数字）的总和。 最低的数字并不总是第一位。
例如，sumAll([4,1]) 应返回 10，因为从 1 到 4（包含 1、4）的所有数字的和是 10。
function sumAll(arr) {
  var min = Math.min(arr[0], arr[1]);
  var max = Math.max(arr[0], arr[1]);
  var sum = 0;
  for (var i = min; i <= max; i++) {
    sum += i;
  }
  return sum;
}
sumAll([1, 4]);


数组的对称差
比较两个数组并返回一个新数组，包含所有只在其中一个数组中出现的元素，排除两个数组都存在的元素。 换言之，我们需要返回两个数组的对称差。
**注意：**返回数组中的元素顺序不会影响挑战的测试结果。
function diffArray(arr1, arr2) {
  const newArr = arr1
    .filter(item => !arr2.includes(item)) // 在arr1中存在但不在arr2中存在的元素
    .concat(arr2.filter(item => !arr1.includes(item))); // 在arr2中存在但不在arr1中存在的元素
  return newArr;
}
diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);


过滤数组元素
你将获得一个初始数组（destroyer 函数中的第一个参数），后跟一个或多个参数。 从初始数组中移除所有与后续参数相等的元素。
注意： 你可以使用 arguments 对象。
function destroyer(arr, ...args) {
  return arr.filter(item => !args.includes(item));
}
destroyer([1, 2, 3, 1, 2, 3], 2, 3);


找出包含特定键值对的对象
创建一个查看对象数组（第一个参数）的函数，并返回具有匹配的名称和值对的所有对象的数组（第二个参数）。 
如果要包含在返回的数组中，则源对象的每个名称和值对都必须存在于集合中的对象中。
比如，如果第一个参数是 [{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }]，第二个参数是 { last: "Capulet" }。
function whatIsInAName(collection, source) {
  return collection.filter((obj) => {
    return Object.keys(source).every((key) => {
      return obj.hasOwnProperty(key) && obj[key] === source[key];
    });
  });
}
whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });


短线连接格式
将字符串转换为短线连接格式。 短线连接格式是小写单词全部小写并以破折号分隔。
function spinalCase(str) {
  // 将驼峰形式的单词转换为小写单词，并在单词之间添加破折号
  str = str.replace(/([a-z])([A-Z])/g, '$1 $2');
  // 将空格和下划线替换为破折号，并将所有字母转换为小写
  str = str.replace(/\s+|_+/g, '-').toLowerCase();
  return str;
}
spinalCase('This Is Spinal Tap');


儿童黑话
儿童黑话也叫 Pig Latin，是一种英语语言游戏。 规则如下：
- 如果单词以辅音开头，就把第一个辅音字母或第一组辅音簇移到单词的结尾，并在后面加上 ay。
- 如果单词以元音开头，只需要在结尾加上 way。
请把传入的字符串根据上述规则翻译成儿童黑话并返回结果。 输入的字符串一定是一个小写的英文单词。
function translatePigLatin(str) {
 // 定义元音字母的正则表达式
 const vowelsRegex = /[aeiou]/;
 // 如果单词以元音开头，只需要在结尾加上 way
 if (vowelsRegex.test(str[0])) {
   return str + 'way';
 } 
 // 找到第一个元音字母的位置
 const index = str.search(vowelsRegex);
 // 如果单词中没有元音字母，则直接在结尾加上 ay
 if (index === -1) {
   return str + 'ay';
 } 
 // 将第一个辅音字母或第一组辅音簇移到单词的结尾，并在后面加上 ay
 return str.slice(index) + str.slice(0, index) + 'ay';
}
translatePigLatin("consonant");


搜索与替换
在这道题目中，我们需要写一个字符串的搜索与替换函数，它的返回值为完成替换后的新字符串。
这个函数接收的第一个参数为待替换的句子。
第二个参数为句中需要被替换的单词。
第三个参数为替换后的单词。
注意： 在更换原始单词时保留原始单词中第一个字符的大小写。 即如果传入的第二个参数为 Book，第三个参数为 dog，那么替换后的结果应为 Dog
myReplace("Let us go to the store", "store", "mall") 应返回 Let us go to the mall。
myReplace("He is Sleeping on the couch", "Sleeping", "sitting") 应返回 He is Sitting on the couch。
myReplace("I think we should look up there", "up", "Down") 应返回 I think we should look down there。
myReplace("This has a spellngi error", "spellngi", "spelling") 应返回 This has a spelling error。
myReplace("His name is Tom", "Tom", "john") 应返回 His name is John。
myReplace("Let us get back to more Coding", "Coding", "algorithms") 应返回 Let us get back to more Algorithms。

function myReplace(str, before, after) {
  // 根据第一个参数的大小写，判断替换后的字符串的首字母大小写
  const firstLetter = str[str.indexOf(before)].toLowerCase() === str[str.indexOf(before)] ? after[0].toLowerCase() : after[0].toUpperCase();
  // 将替换后的字符串的首字母替换为正确的大小写
  const newAfter = firstLetter + after.slice(1);
  // 使用正则表达式进行搜索和替换
  const regex = new RegExp(before, 'gi');
  return str.replace(regex, newAfter);
}

myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");


DNA 配对
脱氧核糖核酸组由核酸对组成。 基本配对的字符是 AT and CG，这些字符形成了 DNA 双螺旋的构件。
DNA 链缺少配对元素。 写一个函数来匹配缺失的 DNA 字符串。 对于提供的字符串中的每个字符，找出基本的配对字符。 返回二维数组的结果。
例如，传入 GCG 时，应返回 [["G", "C"], ["C","G"], ["G", "C"]]。
字符和它的配对组成一个数组，所有配对数组放在一个数组里。
function pairElement(str) {
  // 创建一个空数组，用于保存DNA配对的结果
  let pairs = [];
  // 遍历输入的字符串
  for (let i = 0; i < str.length; i++) {
    let char = str[i];
    let pair = [];
    
    // 根据当前字符，寻找基本的配对字符，形成配对数组
    if (char === "A") {
      pair.push("A", "T");
    } else if (char === "T") {
      pair.push("T", "A");
    } else if (char === "C") {
      pair.push("C", "G");
    } else if (char === "G") {
      pair.push("G", "C");
    }    
    // 将配对数组添加到结果数组中
    pairs.push(pair);
  }  
  return pairs;
}
pairElement("GCG");


寻找缺失的字母
在这道题目中，我们需要写一个函数，找出传入的字符串里缺失的字母并返回它。
如果所有字母都在传入的字符串范围内，返回 undefined。
function fearNotLetter(str) {
  var letters = str.match(/[A-Za-z]/g);
  var missingLetter;
  for (var i = letters[0].charCodeAt(); i <= letters[letters.length-1].charCodeAt(); i++) {
    var currentLetter = String.fromCharCode(i);
    if (letters.indexOf(currentLetter) === -1) {
      missingLetter = currentLetter;
      break;
    }
  }
  return missingLetter || undefined;
}
fearNotLetter("abce");


集合排序
编写一个带有两个或更多数组的函数，并按原始提供的数组的顺序返回一个新的唯一值数组。
换句话说，所有数组中出现的所有值都应按其原始顺序包括在内，但最终数组中不得重复。
去重后的数字应按其出现在参数中的原始顺序排序，最终数组不应按数字大小进行排序。
如有疑问，请先浏览下方的测试用例。
uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]) 应返回 [1, 3, 2, 5, 4]。
uniteUnique([1, 2, 3], [5, 2, 1]) 应返回 [1, 2, 3, 5]。
uniteUnique([1, 2, 3], [5, 2, 1, 4], [2, 1], [6, 7, 8]) 应返回 [1, 2, 3, 5, 4, 6, 7, 8]。
uniteUnique([1, 3, 2], [5, 4], [5, 6]) 应该返回 [1, 3, 2, 5, 4, 6]。
uniteUnique([1, 3, 2, 3], [5, 2, 1, 4], [2, 1]) 应该返回 [1, 3, 2, 5, 4]。

function uniteUnique(arr) {
  var args = Array.prototype.slice.call(arguments);
  var result = [];
  args.reduce(function(acc, curr) {
    return acc.concat(curr.filter(function(num) {
      return acc.indexOf(num) === -1;
    }));
  }).forEach(function(num) {
    if (result.indexOf(num) === -1) {
      result.push(num);
    }
  });
  return result;
}
uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);


转换 HTML 字符实体
请将字符串中的 &、<、>、"（双引号）和 '（单引号）转换为相应的 HTML 字符实体。
function convertHTML(str) {
  str = str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
  return str;
}
convertHTML("Dolce & Gabbana");


求斐波那契数列中的奇数之和
在这道题目中，我们需要写一个函数，参数为一个正整数 num，返回值为斐波那契数列中，小于或等于 num 的奇数之和。
斐波那契数列的前两个数字是 0 和 1。 后面的每个数字由之前两数相加得出。 斐波那契数列的前七个数字分别为：0、1、1、2、3、5、8。
比如，sumFibs(10) 应该返回 10。 因为斐波那契数列中，比 10 小的数字只有 1、1、3、5。

sumFibs(1) 应返回一个数字。
sumFibs(1000) 应返回 1785。
sumFibs(4000000) 应返回 4613732。
sumFibs(4) 应返回 5。
sumFibs(75024) 应返回 60696。
sumFibs(75025) 应返回 135721。

function sumFibs(num) {
// 初始化斐波那契数列的前两个数字
var fibs = [1, 1];

// 生成斐波那契数列，直到最后一个数字大于 num
while (fibs[fibs.length - 1] <= num) {
var nextFib = fibs[fibs.length - 1] + fibs[fibs.length - 2];
if (nextFib <= num) {
fibs.push(nextFib);
}
}

// 遍历斐波那契数列，将奇数相加
var sum = 0;
for (var i = 0; i < fibs.length; i++) {
if (fibs[i] % 2 === 1) {
sum += fibs[i];
}
}

return sum;
}
sumFibs(4);


质数求和
质数（prime number）是大于 1 且仅可以被 1 和自己整除的数。 比如，2 就是一个质数，因为它只可以被 1 和 2（它本身）整除。 相反，4 不是质数，因为它可以被 1, 2 和 4 整除。
请完成 sumPrimes 方法，使其返回小于等于传入参数数字的所有质数之和。
function sumPrimes(num) {
  let sum = 0;  
  function isPrime(n) {
    if (n < 2) {
      return false;
    }    
    for (let i = 2; i < n; i++) {
      if (n % i === 0) {
        return false;
      }
    }    
    return true;
  }
  
  for (let i = 2; i <= num; i++) {
    if (isPrime(i)) {
      sum += i;
    }
  }  
  return sum;
}
sumPrimes(10);


找出数字范围内的最小公倍数
找到给定参数的最小公倍数，可以被这两个参数整除，也可以被指定范围内的所有整数整除。
注意，较小数不一定总是出现在数组的第一个元素。
例如，如果给定 1 和 3，找到 1 和 3 的最小公倍数，也可以被 1 到 3 之间的所有数字整除。 这里的答案将是 6。
function smallestCommons(arr) {
  // 获取最小数和最大数
  var min = Math.min(arr[0], arr[1]);
  var max = Math.max(arr[0], arr[1]);
  // 初始化最小公倍数为最大数
  var lcm = max;
  // 从最大数开始逐渐增加最小公倍数的值
  while (true) {
    var isDivisible = true;
    // 检查最小公倍数是否能被 [min, max] 范围内的每个整数整除
    for (var i = min; i <= max; i++) {
      if (lcm % i !== 0) {
        isDivisible = false;
        break;
      }
    }
    // 如果能被整除，则找到了最小公倍数
    if (isDivisible) {
      return lcm;
    }
    // 继续增加最小公倍数的值
    lcm += max;
  }
}
smallestCommons([1,5]);


根据参数删除数组元素
给定数组 arr，从数组的第一个元素开始，用函数 func 来检查数组的每个元素是否返回 true。 如果返回 false，就把这个元素删除。 持续执行删除操作，直到某个元素传入 func 时返回 true 为止。
然后在条件满足后返回数组的其余部分，否则， arr 应作为空数组返回。
dropElements([1, 2, 3, 4], function(n) {return n >= 3;}) 应返回 [3, 4]。
dropElements([0, 1, 0, 1], function(n) {return n === 1;}) 应返回 [1, 0, 1]。
dropElements([1, 2, 3], function(n) {return n > 0;}) 应返回 [1, 2, 3]。
dropElements([1, 2, 3, 4], function(n) {return n > 5;}) 应返回 []。
dropElements([1, 2, 3, 7, 4], function(n) {return n > 3;}) 应返回 [7, 4]。
dropElements([1, 2, 3, 9, 2], function(n) {return n > 2;}) 应返回 [3, 9, 2]。
function dropElements(arr, func) {
  // 循环遍历数组
  for (let i = 0; i < arr.length; i++) {
    // 判断元素是否满足条件
    if (func(arr[i])) {
      // 返回数组剩余部分
      return arr.slice(i);
    }
  }
  // 返回空数组
  return [];
}
dropElements([1, 2, 3], function(n) {return n < 3; });


数组扁平化
嵌套数组扁平化成一维数组。 必须考虑到各种深度的嵌套层级。
function steamrollArray(arr) {
  let result = [];

  function flatten(arr) {
    arr.forEach(item => {
      if (Array.isArray(item)) {
        flatten(item);
      } else {
        result.push(item);
      }
    });
  }
  flatten(arr);
  return result;
}
steamrollArray([1, [2], [3, [[4]]]]);


翻译二进制字符串
请实现一个函数，把传入的二进制字符串转换成英文句子。
二进制字符串会以空格分隔。
function binaryAgent(str) {
  // 将二进制字符串按空格分隔
  const binaryArr = str.split(' ');  
  // 将每个二进制字符串转换为对应的字符
  const textArr = binaryArr.map(binary => {
    // 将二进制字符串转换为十进制
    const decimal = parseInt(binary, 2);
    // 将十进制转换为对应的字符
    const character = String.fromCharCode(decimal);
    return character;
  });  
  // 将字符数组转换为字符串并返回
  return textArr.join('');
}
binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");


一切都是True
检查谓词（第二个参数）在集合（第一个参数）的所有元素是否为 truthy。
换句话说，你将获得一个对象的数组集合。 如果数组中的每个对象里，pre 对应属性值均为 truthy，则返回 true。 否则，返回 false 。
JavaScript 中，如果一个值在 Boolean 的上下文中的执行结果为 true，那么我们称这个值是 truthy 的。
别忘了，你可以使用点号表示法或方括号表示法（[]）来访问对象的属性。
function truthCheck(collection, pre) {
  // 遍历集合中的每个对象
  for (let i = 0; i < collection.length; i++) {
    // 如果对象的对应属性值不为 truthy，则返回 false
    if (!collection[i][pre]) {
      return false;
    }
  }
  // 遍历结束后，表示集合中的每个对象的对应属性值都为 truthy，则返回 true
  return true;
}
truthCheck([{name: "Quincy", role: "Founder", isBot: false}, {name: "Naomi", role: "", isBot: false}, {name: "Camperbot", role: "Bot", isBot: true}], "isBot");


可选参数
创建一个将两个参数相加的函数。 如果只提供了一个参数，则返回一个需要一个参数并返回总和的函数。
比如，addTogether(2, 3) 应该返回 5。 而 addTogether(2) 应该返回一个函数。
调用这个返回的函数，为它传入一个值，会返回两个值的总和：
var sumTwoAnd = addTogether(2);
sumTwoAnd(3) 应返回 5。
如果任一参数不是有效数字，则返回 undefined。
addTogether(2, 3) 应返回 5。
addTogether(23, 30) 应返回 53。
addTogether("2", 3) 应返回 undefined。
addTogether(5, undefined) 应返回 undefined。
addTogether("https://www.youtube.com/watch?v=dQw4w9WgXcQ") 应返回 undefined。
addTogether(5) 应返回一个函数。
addTogether(5)(7) 应返回 12。
addTogether(2)([3]) 应返回 undefined。
addTogether(2, "3") 应返回 undefined。
function addTogether() {
  // 检查参数是否为有效数字
  function isValidNum(num) {
    return Number.isInteger(num);
  }
  // 如果传入的第一个参数不是有效数字，则返回 undefined
  if (!isValidNum(arguments[0])) {
    return undefined;
  }
  // 如果传入的第二个参数是有效数字，则返回两个参数的总和
  if (isValidNum(arguments[1])) {
    return arguments[0] + arguments[1];
  }
  // 如果传入的第二个参数不是有效数字，则返回一个函数，该函数接受一个参数，并返回其与第一个参数的总和
  if (arguments.length === 1 && isValidNum(arguments[0])) {
    var firstNum = arguments[0];
    return function(secondNum) {
      if (isValidNum(secondNum)) {
        return firstNum + secondNum;
      } else {
        return undefined;
      }
    }
  }
  // 其他情况，返回 undefined
  return undefined;
}
addTogether(2,3);


创建一个人员对象
用以下方法填充对象构造函数：
getFirstName()
getLastName()
getFullName()
setFirstName(first)
setLastName(last)
setFullName(first, last)
运行测试以查看每个方法的预期输出。 These methods must be the only available means of interacting with the object. Each test will declare a new Person instance as new Person('Bob', 'Ross').
const Person = function(first, last) {
  let firstName = first;
  let lastName = last;
  this.getFirstName = function() {
    return firstName;
  };
  this.getLastName = function() {
    return lastName;
  };
  this.getFullName = function() {
    return firstName + ' ' + lastName;
  };
  this.setFirstName = function(first) {
    firstName = first;
  };
  this.setLastName = function(last) {
    lastName = last;
  };
  this.setFullName = function(first, last) {
    firstName = first;
    lastName = last;
  };
};


计算轨道周期
根据开普勒第三定律，在环状或椭圆轨道上在轨两个点质量的 T 轨道期为：T = 2π * √(a^3 / μ)
a 是轨道的半主轴
μ=GM 是标准重力参数
G 是引力常量
M 是较大天体的质量
返回一个新数组，将元素的平均高度转换为轨道周期（以秒为单位）。
数组将包含 {name: 'name', avgAlt: avgAlt} 格式的对象 。
最终的计算结果应取整到最接近的整数。 正在轨道上的物体是地球。
地球半径为 6367.4447 公里，地球的 GM 值为 398600.4418 km 3 s -2 。

function orbitalPeriod(arr) {
  const GM = 398600.4418;
  const earthRadius = 6367.4447;
  // 定义计算轨道周期的函数
  const calculateOrbitalPeriod = (avgAlt) => {
    const a = earthRadius + avgAlt;
    const T = 2 * Math.PI * Math.sqrt((a ** 3) / GM);
    return Math.round(T);
  };
  // 遍历输入数组，将每个对象的平均高度转换为轨道周期
  const newArr = arr.map(obj => {
    return {
      name: obj.name,
      orbitalPeriod: calculateOrbitalPeriod(obj.avgAlt)
    };
  });
  return newArr;
}
orbitalPeriod([{name : "sputnik", avgAlt : 35873.5553}]);
