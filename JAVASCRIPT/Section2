let 和 var 的区别(比较 var 和 let 关键字的作用域)：
1、作用域不同
var是函数作用域，let是块作用域。
在函数中声明了var，整个函数内都是有效的，比如说在for循环内定义的一个var变量，实际上其在for循环以外也是可以访问的
而let由于是块作用域，所以如果在块作用域内定义的变量，比如说在for循环内，在其外面是不可被访问的，所以for循环推荐用let
2、let不能在定义之前访问该变量，但是var可以。
let必须先声明，再使用。
而var先使用后声明也行，只不过直接使用但没有定义的时候，其值是undefined。
var有一个变量提升的过程，当整个函数作用域被创建的时候，实际上var定义的变量都会被创建，并且如果此时没有初始化的话，则默认为初始化一个undefined。
3、let不能被重新定义，但是var是可以的。


改变一个用 const 声明的数组
使用 const 分配给变量的对象（包括数组和函数）仍然是可变的。 使用 const 声明只能防止变量标识符的重新分配。
const s = [5, 7, 2];
s[0] = 2;
s[1] = 5;
s[2] = 7;


防止对象改变
const 声明并不会真的保护数据不被改变。 为了确保数据不被改变，JavaScript 提供了一个函数 Object.freeze。
function freezeObj() {
  const MATH_CONSTANTS = {
    PI: 3.14
  };
  // 只修改这一行下面的代码
  Object.freeze(MATH_CONSTANTS);
  // 只修改这一行上面的代码
  try {
    MATH_CONSTANTS.PI = 99;
  } catch(ex) {
    console.log(ex);
  }
  return MATH_CONSTANTS.PI;
}
const PI = freezeObj();


使用箭头函数编写简洁的匿名函数
使用箭头函数的语法重写 myConcat 函数，将 arr2 的内容添加到 arr1。
var myConcat = function(arr1, arr2) {
  return arr1.concat(arr2);
};
console.log(myConcat([1, 2], [3, 4, 5]));


设置函数的默认参数
给函数 increment 传入默认参数，使得在 value 没有被赋值的时候，默认给 number 加上 1。
// 只修改这一行下面的代码
const increment = (number, value=1) => number + value;
// 只修改这一行上面的代码


将 rest 操作符与函数参数一起使用
修改 sum 函数，使用 rest 参数，使 sum 函数可以接收任意数量的参数，并返回它们的总和。
const sum = (...args) => {
  let total = 0;
  for (let i = 0; i < args.length; i++) {
    total += args[i];
  }
  return total;
}


使用 spread 运算符展开数组项
使用展开操作符将 arr1 中的全部内容复制到另一个数组 arr2 中。
const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;
arr2 = [...arr1];  // 修改这一行
console.log(arr2);


使用解构赋值来获取对象的值
把两个赋值语句替换成效果相同的解构赋值语句。 today 和 tomorrow 的值应该还是 HIGH_TEMPERATURES 对象中 today 和 tomorrow 属性的值。
const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};

// 只修改这一行下面的代码
const { today, tomorrow} = HIGH_TEMPERATURES;
// 只修改这一行上面的代码


使用解构赋值从对象中分配变量
使用解构赋值语句替换两个赋值语句。 将 HIGH_TEMPERATURES 的 today 和 tomorrow 的值赋值给 highToday 和 highTomorrow。
const HIGH_TEMPERATURES = {
  yesterday: 75,
  today: 77,
  tomorrow: 80
};

// 只修改这一行下面的代码
const { today:highToday, tomorrow:highTomorrow} = HIGH_TEMPERATURES;
// 只修改这一行上面的代码


使用解构赋值从嵌套对象中分配变量
将两个赋值语句替换成等价的解构赋值。 lowToday 和 highToday 应该为 LOCAL_FORECAST 中 today.low 和 today.high 的值。
const LOCAL_FORECAST = {
  yesterday: { low: 61, high: 75 },
  today: { low: 64, high: 77 },
  tomorrow: { low: 68, high: 80 }
};

// 只修改这一行下面的代码
const { today: { low: lowToday, high: highToday }} = LOCAL_FORECAST;
// 只修改这一行上面的代码


使用解构赋值从数组中分配变量
使用数组解构来交换变量 a 与 b 的值，使 a 接收 b 的值，而 b 接收 a 的值。
let a = 8, b = 6;
// 只修改这一行下面的代码
[a, b]=[b, a];


通过 rest 参数解构
使用一个带有 rest 语法的解构赋值来模拟 Array.prototype.slice() 的行为。 removeFirstTwo() 应该返回原始数组 list 的子数组，前两个元素被省略。
function removeFirstTwo(list) {
  const [, , ...newList] = list;
  return newList;
}
const source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
const sourceWithoutFirstTwo = removeFirstTwo(source);
  

使用解构赋值将对象作为函数的参数传递
对 half 的参数进行解构赋值，仅将 max 与 min 的值传进函数。
const stats = {
  max: 56.78,
  standard_deviation: 4.34,
  median: 34.54,
  mode: 23.87,
  min: -0.75,
  average: 35.85
};

// 只修改这一行下面的代码
const half = ({ max, min }) => (max + min) / 2.0; 
// 只修改这一行上面的代码


使用模板字面量创建字符串
使用模板字符串的反引号的语法创建一个包含条目（li）字符串的数组。 
每个条目应该是 result 对象 failure 属性的数组内的元素，并具有 class 属性，值为 text-warning。 makeList 函数应该返回列表项字符串的数组。
使用遍历方法（可以是任意形式的循环）输出指定值（如下）。
[
  '<li class="text-warning">no-var</li>',
  '<li class="text-warning">var-on-top</li>',
  '<li class="text-warning">linebreak</li>'
]

const result = {
  success: ["max-length", "no-amd", "prefer-arrow-functions"],
  failure: ["no-var", "var-on-top", "linebreak"],
  skipped: ["no-extra-semi", "no-dup-keys"]
};
function makeList(arr) {
  // 只修改这一行下面的代码
  const failureItems = [];
  for (let i = 0; i < arr.length; i++) {
    failureItems.push(`<li class="text-warning">${arr[i]}</li>`);
  }
  // 只修改这一行上面的代码

  return failureItems;
}
const failuresList = makeList(result.failure);


使用简单字段编写简洁的对象字面量声明
请使用简单属性对象的语法来创建并返回一个具有 name、age 和 gender 属性的对象。
const createPerson = (name, age, gender) => {
  // 只修改这一行下面的代码
  return {
    name,
    age,
    gender
  };
  // 只修改这一行上面的代码
};


用 ES6 编写简洁的函数声明
const person = {
  name: "Taylor",
  sayHello() {
    return `Hello! My name is ${this.name}.`;
  }
};
使用以上这种简短的语法，重构在 bicycle 对象中的 setGear 函数。
// 只修改这一行下面的代码
const bicycle = {
  gear: 2,
  setGear(newGear) {
    this.gear = newGear;
  }
};
// 只修改这一行上面的代码
bicycle.setGear(3);
console.log(bicycle.gear);


使用 class 语法定义构造函数
使用 class 关键词，写一个 constructor 来创建 Vegetable class。
Vegetable 这个 class 可以创建 vegetable 对象，这个对象拥有一个在 constructor 中赋值的 name 属性。
// 只修改这一行下面的代码
class Vegetable{
  constructor(name) {
    this.name = name;
  }
}
// 只修改这一行上面的代码
const carrot = new Vegetable('carrot');
console.log(carrot.name); // 应该显示 'carrot'


使用 getter 和 setter 来控制对象的访问
使用 class 关键字创建一个 Thermostat class。 constructor 接收一个华氏温度。
在 class 中，创建一个 getter 来获取摄氏温度和一个 setter 来设置温度值。
记得在 C = 5/9 * (F - 32) 和 F = C * 9.0 / 5 + 32 中，F 是华氏温度值，C 是摄氏温度值。
注意： 完成这个挑战后，应该在 class 中使用一个温度标准，要么是华氏温度，要么是摄氏温度。
这就是 getter 和 setter 的功能。 你正在为别的用户创建一个 API，不论你使用哪一个，用户都将获得正确的结果。

或者说，你从用户需求中抽象出了实现细节。
// 只修改这一行下面的代码
class Thermostat {
  constructor(fahrenheit) {
    this._temperature = fahrenheit;
  }

  get temperature() {
    return 5 / 9 * (this._temperature - 32);
  }

  set temperature(celsius) {
    this._temperature = celsius * 9.0 / 5 + 32;
  }
}
// 只修改这一行上面的代码

const thermos = new Thermostat(76); // 设置为华氏刻度
let temp = thermos.temperature; // 24.44 摄氏度
thermos.temperature = 26;
temp = thermos.temperature; // 26 摄氏度


用 export default 创建一个默认导出
下面的函数应该在这个模块中返回一个值。 请添加需要的代码。
export default function subtract(x, y) {
  return x - y;
}


创建一个 JavaScript Promise
Promise 是异步编程的一种解决方案 - 它在未来的某时会生成一个值。 任务完成，分执行成功和执行失败两种情况。 
Promise 是构造器函数，需要通过 new 关键字来创建。 构造器参数是一个函数，该函数有两个参数 - resolve 和 reject。 通过它们来判断 promise 的执行结果。 用法如下：
const myPromise = new Promise((resolve, reject) => {

});
Promise 有三个状态：pending、fulfilled 和 rejected。 
上一个挑战里创建的 promise 一直阻塞在 pending 状态里，因为没有调用 promise 的完成方法。 
Promise 提供的 resolve 和 reject 参数就是用来结束 promise 的。 Promise 成功时调用 resolve，promise 执行失败时调用 reject， 如下文所述，这些方法需要有一个参数。
const myPromise = new Promise((resolve, reject) => {
  if(condition here) {
    resolve("Promise was fulfilled");
  } else {
    reject("Promise was rejected");
  }
});
当程序需要花费未知的时间才能完成时（比如一些异步操作），一般是服务器请求，promise 很有用。 
服务器请求会花费一些时间，当结束时，需要根据服务器的响应执行一些操作。 这可以用 then 方法来实现， 当 promise 完成 resolve 时会触发 then 方法。 例子如下：
myPromise.then(result => {

});
当 promise 失败时会调用 catch 方法。 当 promise 的 reject 方法执行时会直接调用。 用法如下：
myPromise.catch(error => {

});
